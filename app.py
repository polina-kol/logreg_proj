import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

st.title("üìâ –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π")


uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type="csv")
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")


    target_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (binary)", df.columns)

    if df[target_col].nunique() != 2:
        st.warning("–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–π (0 –∏ 1)")
    else:

        feature_cols = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—á–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", df.columns.drop(target_col))

        if len(feature_cols) < 1:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–∏—á—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        else:
            X = df[feature_cols]
            y = df[target_col]


            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)


            model = LogisticRegression()
            model.fit(X_scaled, y)


            st.subheader("üîç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏:")
            coef_dict = {col: coef for col, coef in zip(feature_cols, model.coef_[0])}
            coef_dict['intercept'] = model.intercept_[0]
            st.json(coef_dict)


            st.subheader("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å scatter plot")

            col1, col2 = st.columns(2)
            with col1:
                x_axis = st.selectbox("–û—Å—å X", feature_cols)
            with col2:
                y_axis = st.selectbox("–û—Å—å Y", feature_cols)

            if x_axis == y_axis:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –æ—Å–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            else:
                plt.figure(figsize=(8, 6))
                classes = df[target_col].unique()

                for cls in classes:
                    subset = df[df[target_col] == cls]
                    plt.scatter(subset[x_axis], subset[y_axis],
                                label=f'Class {cls}', alpha=0.7)

                plt.xlabel(x_axis)
                plt.ylabel(y_axis)
                plt.title(f"{x_axis} vs {y_axis}, —Ü–≤–µ—Ç ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞—Ä–≥–µ—Ç–∞")
                plt.legend()
                plt.grid(True)
                st.pyplot(plt)

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª.")